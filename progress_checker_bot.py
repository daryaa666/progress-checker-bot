import logging
import pandas as pd
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import os

# üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ CSV
df = pd.read_csv("students.csv")

# üìç –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_states = {}

# üõ† –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# ‚ñ∂Ô∏è /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—é –ø–æ—á—Ç—É, —á—Ç–æ–±—ã –º—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å.")
    user_states[update.effective_chat.id] = "waiting_for_email"

# üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    state = user_states.get(chat_id)

    if state == "waiting_for_email":
        email = update.message.text.strip().lower()
        student = df[df["Email"].str.lower() == email]

        if not student.empty:
            progress = float(student["Progress"].values[0])
            if progress >= 70:
                await update.message.reply_text("üéâ –£ —Ç–µ–±—è –æ—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –¢—ã –º–æ–∂–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–æ–Ω–∫—É—Ä—Å–µ!")
            else:
                await update.message.reply_text("‚è≥ –ü–æ–∫–∞ —Ç—ã –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—à—å –ø–æ —É—Å–ª–æ–≤–∏—è–º, –Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∂–¥–µ–º —Ç–µ–±—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –∫–æ–Ω–∫—É—Ä—Å–µ!")
        else:
            await update.message.reply_text("üòï –ú—ã –Ω–µ –Ω–∞—à–ª–∏ —Ç–∞–∫—É—é –ø–æ—á—Ç—É –≤ –±–∞–∑–µ. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
    else:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É.")

# üöÄ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    TOKEN = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    app.run_polling(close_loop=False)
